import openai
import tkinter as tk
 
openai.api_key="[YOUR KEY HERE]"

chatname = "Zine Maker"

botname = "MachineZines"
 
system_msg = "You are MachineZines, a chatbot that loves to create brief stories that fit on 6 pages. When given a story prompt, you create a brief story that fits on a small 6-page zine, dividing the story with Page 1, Page 2, etc.. It is very important that you answer concisely with one sentence per page so that the zine can be printed on 6 small pages. Each page should have a specific and compelling image and action. Make sure every story is compelling, funny, smart, and include a surprising plot twist on Page 4 of each story." 
 
msgs = []
 
msgs.append({"role": "system", "content": system_msg})
 
def reset():
    global msgs
    msgs = []
    chat_history.delete(1.0, tk.END)
    msgs.append({"role": "system", "content": system_msg})
 
 
def send_message():
    chat_history.tag_configure("inputfont", font=("Arial", 12), foreground="#000000")
    chat_history.tag_configure("responsefont", font=("Arial", 12), foreground="#00008B")
    chat_history.tag_configure("bold", font=("Arial", 12, "bold"))
    user_input = user_input_box.get('1.0', 'end-1c')
    if user_input == "quit()":
        window.destroy()
        return
    elif user_input == "reset()":
        reset()
        user_input_box.delete("1.0", tk.END)
        return
    msgs.append({"role": "user", "content": user_input})
    chat_history.insert(tk.END, "\nYou:\n", "bold")
    chat_history.insert(tk.END, user_input + "\n", "inputfont")
    chat_history.yview(tk.END)
    user_input_box.delete("1.0", tk.END)
    window.update_idletasks()
    chat_history.yview(tk.END)    
    response = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=msgs)
    reply = response["choices"][0]["message"]["content"]
    msgs.append({"role": "assistant", "content": reply})
    chat_history.insert(tk.END, "\n" + botname + ":\n", "bold")
    chat_history.insert(tk.END, reply + "\n", "responsefont")
    chat_history.yview(tk.END)
    
def regenerate_response():
    global msgs
    if len(msgs) > 1 and msgs[-1]["role"] == "assistant":
        msgs.pop()
        response = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=msgs)
        reply = response["choices"][0]["message"]["content"]
        msgs.append({"role": "assistant", "content": reply})
        chat_history.delete("end-2l", tk.END)
        chat_history.insert(tk.END, "\n" + reply + "\n", "responsefont")
        chat_history.yview(tk.END)
 
# Create the GUI window
window = tk.Tk()
window.title(chatname)
 
# Create the chat history area
chat_history = tk.Text(window)
chat_history.config(wrap="word")
chat_history.config(width=50, height=20)
chat_history.pack(fill="both", expand=True, padx=5, ipadx=5)
 
# Create the user input box and send, reset, and regenerate buttons
user_input_box = tk.Text(window, wrap='word', height=3)
user_input_box.configure(font=("Arial", 12))
user_input_box.pack(side="left", fill="x", expand=True, padx=5, pady=5, ipadx=5, ipady=5)
regenerate_button = tk.Button(window, text="â™»", command=regenerate_response)
regenerate_button.pack(side="right")
send_button = tk.Button(window, text="Reset", command=reset)
send_button.pack(side="right")
send_button = tk.Button(window, text="Send", command=send_message)
send_button.pack(side="right")
 
def send_on_enter(event):
    send_message()
    return "break"
 
user_input_box.bind("<Return>", send_on_enter)
 
# Get the width and height of the screen
screen_width = window.winfo_screenwidth()
screen_height = window.winfo_screenheight()
 
# Calculate the x and y coordinates for the window
x_coordinate = int((screen_width/2) - (window.winfo_reqwidth()*2))
y_coordinate = int(screen_height/4)
 
# Set the window position
window.geometry("+{}+{}".format(x_coordinate, y_coordinate))
 
user_input_box.focus()
 
window.mainloop()
